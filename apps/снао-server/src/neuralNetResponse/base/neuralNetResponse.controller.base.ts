/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NeuralNetResponseService } from "../neuralNetResponse.service";
import { NeuralNetResponseCreateInput } from "./NeuralNetResponseCreateInput";
import { NeuralNetResponse } from "./NeuralNetResponse";
import { NeuralNetResponseFindManyArgs } from "./NeuralNetResponseFindManyArgs";
import { NeuralNetResponseWhereUniqueInput } from "./NeuralNetResponseWhereUniqueInput";
import { NeuralNetResponseUpdateInput } from "./NeuralNetResponseUpdateInput";

export class NeuralNetResponseControllerBase {
  constructor(protected readonly service: NeuralNetResponseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NeuralNetResponse })
  async createNeuralNetResponse(
    @common.Body() data: NeuralNetResponseCreateInput
  ): Promise<NeuralNetResponse> {
    return await this.service.createNeuralNetResponse({
      data: {
        ...data,

        dvachPost: data.dvachPost
          ? {
              connect: data.dvachPost,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,
        content: true,

        dvachPost: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [NeuralNetResponse] })
  @ApiNestedQuery(NeuralNetResponseFindManyArgs)
  async neuralNetResponses(
    @common.Req() request: Request
  ): Promise<NeuralNetResponse[]> {
    const args = plainToClass(NeuralNetResponseFindManyArgs, request.query);
    return this.service.neuralNetResponses({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,
        content: true,

        dvachPost: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NeuralNetResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async neuralNetResponse(
    @common.Param() params: NeuralNetResponseWhereUniqueInput
  ): Promise<NeuralNetResponse | null> {
    const result = await this.service.neuralNetResponse({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,
        content: true,

        dvachPost: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NeuralNetResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNeuralNetResponse(
    @common.Param() params: NeuralNetResponseWhereUniqueInput,
    @common.Body() data: NeuralNetResponseUpdateInput
  ): Promise<NeuralNetResponse | null> {
    try {
      return await this.service.updateNeuralNetResponse({
        where: params,
        data: {
          ...data,

          dvachPost: data.dvachPost
            ? {
                connect: data.dvachPost,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          timestamp: true,
          content: true,

          dvachPost: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NeuralNetResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNeuralNetResponse(
    @common.Param() params: NeuralNetResponseWhereUniqueInput
  ): Promise<NeuralNetResponse | null> {
    try {
      return await this.service.deleteNeuralNetResponse({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          timestamp: true,
          content: true,

          dvachPost: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
