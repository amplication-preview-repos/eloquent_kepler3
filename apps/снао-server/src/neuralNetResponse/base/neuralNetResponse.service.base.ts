/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  NeuralNetResponse as PrismaNeuralNetResponse,
  DvachPost as PrismaDvachPost,
} from "@prisma/client";

export class NeuralNetResponseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NeuralNetResponseCountArgs, "select">
  ): Promise<number> {
    return this.prisma.neuralNetResponse.count(args);
  }

  async neuralNetResponses(
    args: Prisma.NeuralNetResponseFindManyArgs
  ): Promise<PrismaNeuralNetResponse[]> {
    return this.prisma.neuralNetResponse.findMany(args);
  }
  async neuralNetResponse(
    args: Prisma.NeuralNetResponseFindUniqueArgs
  ): Promise<PrismaNeuralNetResponse | null> {
    return this.prisma.neuralNetResponse.findUnique(args);
  }
  async createNeuralNetResponse(
    args: Prisma.NeuralNetResponseCreateArgs
  ): Promise<PrismaNeuralNetResponse> {
    return this.prisma.neuralNetResponse.create(args);
  }
  async updateNeuralNetResponse(
    args: Prisma.NeuralNetResponseUpdateArgs
  ): Promise<PrismaNeuralNetResponse> {
    return this.prisma.neuralNetResponse.update(args);
  }
  async deleteNeuralNetResponse(
    args: Prisma.NeuralNetResponseDeleteArgs
  ): Promise<PrismaNeuralNetResponse> {
    return this.prisma.neuralNetResponse.delete(args);
  }

  async getDvachPost(parentId: string): Promise<PrismaDvachPost | null> {
    return this.prisma.neuralNetResponse
      .findUnique({
        where: { id: parentId },
      })
      .dvachPost();
  }
}
