/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { NeuralNetResponse } from "./NeuralNetResponse";
import { NeuralNetResponseCountArgs } from "./NeuralNetResponseCountArgs";
import { NeuralNetResponseFindManyArgs } from "./NeuralNetResponseFindManyArgs";
import { NeuralNetResponseFindUniqueArgs } from "./NeuralNetResponseFindUniqueArgs";
import { CreateNeuralNetResponseArgs } from "./CreateNeuralNetResponseArgs";
import { UpdateNeuralNetResponseArgs } from "./UpdateNeuralNetResponseArgs";
import { DeleteNeuralNetResponseArgs } from "./DeleteNeuralNetResponseArgs";
import { DvachPost } from "../../dvachPost/base/DvachPost";
import { NeuralNetResponseService } from "../neuralNetResponse.service";
@graphql.Resolver(() => NeuralNetResponse)
export class NeuralNetResponseResolverBase {
  constructor(protected readonly service: NeuralNetResponseService) {}

  async _neuralNetResponsesMeta(
    @graphql.Args() args: NeuralNetResponseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [NeuralNetResponse])
  async neuralNetResponses(
    @graphql.Args() args: NeuralNetResponseFindManyArgs
  ): Promise<NeuralNetResponse[]> {
    return this.service.neuralNetResponses(args);
  }

  @graphql.Query(() => NeuralNetResponse, { nullable: true })
  async neuralNetResponse(
    @graphql.Args() args: NeuralNetResponseFindUniqueArgs
  ): Promise<NeuralNetResponse | null> {
    const result = await this.service.neuralNetResponse(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => NeuralNetResponse)
  async createNeuralNetResponse(
    @graphql.Args() args: CreateNeuralNetResponseArgs
  ): Promise<NeuralNetResponse> {
    return await this.service.createNeuralNetResponse({
      ...args,
      data: {
        ...args.data,

        dvachPost: args.data.dvachPost
          ? {
              connect: args.data.dvachPost,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => NeuralNetResponse)
  async updateNeuralNetResponse(
    @graphql.Args() args: UpdateNeuralNetResponseArgs
  ): Promise<NeuralNetResponse | null> {
    try {
      return await this.service.updateNeuralNetResponse({
        ...args,
        data: {
          ...args.data,

          dvachPost: args.data.dvachPost
            ? {
                connect: args.data.dvachPost,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => NeuralNetResponse)
  async deleteNeuralNetResponse(
    @graphql.Args() args: DeleteNeuralNetResponseArgs
  ): Promise<NeuralNetResponse | null> {
    try {
      return await this.service.deleteNeuralNetResponse(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => DvachPost, {
    nullable: true,
    name: "dvachPost",
  })
  async getDvachPost(
    @graphql.Parent() parent: NeuralNetResponse
  ): Promise<DvachPost | null> {
    const result = await this.service.getDvachPost(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
