/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DvachPost as PrismaDvachPost,
  NeuralNetResponse as PrismaNeuralNetResponse,
  Prompt as PrismaPrompt,
} from "@prisma/client";

export class DvachPostServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DvachPostCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dvachPost.count(args);
  }

  async dvachPosts(
    args: Prisma.DvachPostFindManyArgs
  ): Promise<PrismaDvachPost[]> {
    return this.prisma.dvachPost.findMany(args);
  }
  async dvachPost(
    args: Prisma.DvachPostFindUniqueArgs
  ): Promise<PrismaDvachPost | null> {
    return this.prisma.dvachPost.findUnique(args);
  }
  async createDvachPost(
    args: Prisma.DvachPostCreateArgs
  ): Promise<PrismaDvachPost> {
    return this.prisma.dvachPost.create(args);
  }
  async updateDvachPost(
    args: Prisma.DvachPostUpdateArgs
  ): Promise<PrismaDvachPost> {
    return this.prisma.dvachPost.update(args);
  }
  async deleteDvachPost(
    args: Prisma.DvachPostDeleteArgs
  ): Promise<PrismaDvachPost> {
    return this.prisma.dvachPost.delete(args);
  }

  async findNeuralNetResponses(
    parentId: string,
    args: Prisma.NeuralNetResponseFindManyArgs
  ): Promise<PrismaNeuralNetResponse[]> {
    return this.prisma.dvachPost
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .neuralNetResponses(args);
  }

  async findPrompts(
    parentId: string,
    args: Prisma.PromptFindManyArgs
  ): Promise<PrismaPrompt[]> {
    return this.prisma.dvachPost
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .prompts(args);
  }
}
