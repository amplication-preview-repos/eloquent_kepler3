/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DvachPost } from "./DvachPost";
import { DvachPostCountArgs } from "./DvachPostCountArgs";
import { DvachPostFindManyArgs } from "./DvachPostFindManyArgs";
import { DvachPostFindUniqueArgs } from "./DvachPostFindUniqueArgs";
import { CreateDvachPostArgs } from "./CreateDvachPostArgs";
import { UpdateDvachPostArgs } from "./UpdateDvachPostArgs";
import { DeleteDvachPostArgs } from "./DeleteDvachPostArgs";
import { NeuralNetResponseFindManyArgs } from "../../neuralNetResponse/base/NeuralNetResponseFindManyArgs";
import { NeuralNetResponse } from "../../neuralNetResponse/base/NeuralNetResponse";
import { PromptFindManyArgs } from "../../prompt/base/PromptFindManyArgs";
import { Prompt } from "../../prompt/base/Prompt";
import { DvachPostService } from "../dvachPost.service";
@graphql.Resolver(() => DvachPost)
export class DvachPostResolverBase {
  constructor(protected readonly service: DvachPostService) {}

  async _dvachPostsMeta(
    @graphql.Args() args: DvachPostCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DvachPost])
  async dvachPosts(
    @graphql.Args() args: DvachPostFindManyArgs
  ): Promise<DvachPost[]> {
    return this.service.dvachPosts(args);
  }

  @graphql.Query(() => DvachPost, { nullable: true })
  async dvachPost(
    @graphql.Args() args: DvachPostFindUniqueArgs
  ): Promise<DvachPost | null> {
    const result = await this.service.dvachPost(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DvachPost)
  async createDvachPost(
    @graphql.Args() args: CreateDvachPostArgs
  ): Promise<DvachPost> {
    return await this.service.createDvachPost({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DvachPost)
  async updateDvachPost(
    @graphql.Args() args: UpdateDvachPostArgs
  ): Promise<DvachPost | null> {
    try {
      return await this.service.updateDvachPost({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DvachPost)
  async deleteDvachPost(
    @graphql.Args() args: DeleteDvachPostArgs
  ): Promise<DvachPost | null> {
    try {
      return await this.service.deleteDvachPost(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [NeuralNetResponse], {
    name: "neuralNetResponses",
  })
  async findNeuralNetResponses(
    @graphql.Parent() parent: DvachPost,
    @graphql.Args() args: NeuralNetResponseFindManyArgs
  ): Promise<NeuralNetResponse[]> {
    const results = await this.service.findNeuralNetResponses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Prompt], { name: "prompts" })
  async findPrompts(
    @graphql.Parent() parent: DvachPost,
    @graphql.Args() args: PromptFindManyArgs
  ): Promise<Prompt[]> {
    const results = await this.service.findPrompts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
