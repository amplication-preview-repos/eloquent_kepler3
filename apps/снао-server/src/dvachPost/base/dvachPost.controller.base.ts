/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DvachPostService } from "../dvachPost.service";
import { DvachPostCreateInput } from "./DvachPostCreateInput";
import { DvachPost } from "./DvachPost";
import { DvachPostFindManyArgs } from "./DvachPostFindManyArgs";
import { DvachPostWhereUniqueInput } from "./DvachPostWhereUniqueInput";
import { DvachPostUpdateInput } from "./DvachPostUpdateInput";
import { NeuralNetResponseFindManyArgs } from "../../neuralNetResponse/base/NeuralNetResponseFindManyArgs";
import { NeuralNetResponse } from "../../neuralNetResponse/base/NeuralNetResponse";
import { NeuralNetResponseWhereUniqueInput } from "../../neuralNetResponse/base/NeuralNetResponseWhereUniqueInput";
import { PromptFindManyArgs } from "../../prompt/base/PromptFindManyArgs";
import { Prompt } from "../../prompt/base/Prompt";
import { PromptWhereUniqueInput } from "../../prompt/base/PromptWhereUniqueInput";

export class DvachPostControllerBase {
  constructor(protected readonly service: DvachPostService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DvachPost })
  async createDvachPost(
    @common.Body() data: DvachPostCreateInput
  ): Promise<DvachPost> {
    return await this.service.createDvachPost({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        author: true,
        content: true,
        timestamp: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DvachPost] })
  @ApiNestedQuery(DvachPostFindManyArgs)
  async dvachPosts(@common.Req() request: Request): Promise<DvachPost[]> {
    const args = plainToClass(DvachPostFindManyArgs, request.query);
    return this.service.dvachPosts({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        author: true,
        content: true,
        timestamp: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DvachPost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dvachPost(
    @common.Param() params: DvachPostWhereUniqueInput
  ): Promise<DvachPost | null> {
    const result = await this.service.dvachPost({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        author: true,
        content: true,
        timestamp: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DvachPost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDvachPost(
    @common.Param() params: DvachPostWhereUniqueInput,
    @common.Body() data: DvachPostUpdateInput
  ): Promise<DvachPost | null> {
    try {
      return await this.service.updateDvachPost({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          author: true,
          content: true,
          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DvachPost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDvachPost(
    @common.Param() params: DvachPostWhereUniqueInput
  ): Promise<DvachPost | null> {
    try {
      return await this.service.deleteDvachPost({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          author: true,
          content: true,
          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/neuralNetResponses")
  @ApiNestedQuery(NeuralNetResponseFindManyArgs)
  async findNeuralNetResponses(
    @common.Req() request: Request,
    @common.Param() params: DvachPostWhereUniqueInput
  ): Promise<NeuralNetResponse[]> {
    const query = plainToClass(NeuralNetResponseFindManyArgs, request.query);
    const results = await this.service.findNeuralNetResponses(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,
        content: true,

        dvachPost: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/neuralNetResponses")
  async connectNeuralNetResponses(
    @common.Param() params: DvachPostWhereUniqueInput,
    @common.Body() body: NeuralNetResponseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      neuralNetResponses: {
        connect: body,
      },
    };
    await this.service.updateDvachPost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/neuralNetResponses")
  async updateNeuralNetResponses(
    @common.Param() params: DvachPostWhereUniqueInput,
    @common.Body() body: NeuralNetResponseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      neuralNetResponses: {
        set: body,
      },
    };
    await this.service.updateDvachPost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/neuralNetResponses")
  async disconnectNeuralNetResponses(
    @common.Param() params: DvachPostWhereUniqueInput,
    @common.Body() body: NeuralNetResponseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      neuralNetResponses: {
        disconnect: body,
      },
    };
    await this.service.updateDvachPost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/prompts")
  @ApiNestedQuery(PromptFindManyArgs)
  async findPrompts(
    @common.Req() request: Request,
    @common.Param() params: DvachPostWhereUniqueInput
  ): Promise<Prompt[]> {
    const query = plainToClass(PromptFindManyArgs, request.query);
    const results = await this.service.findPrompts(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,
        timestamp: true,

        dvachPost: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/prompts")
  async connectPrompts(
    @common.Param() params: DvachPostWhereUniqueInput,
    @common.Body() body: PromptWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      prompts: {
        connect: body,
      },
    };
    await this.service.updateDvachPost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/prompts")
  async updatePrompts(
    @common.Param() params: DvachPostWhereUniqueInput,
    @common.Body() body: PromptWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      prompts: {
        set: body,
      },
    };
    await this.service.updateDvachPost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/prompts")
  async disconnectPrompts(
    @common.Param() params: DvachPostWhereUniqueInput,
    @common.Body() body: PromptWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      prompts: {
        disconnect: body,
      },
    };
    await this.service.updateDvachPost({
      where: params,
      data,
      select: { id: true },
    });
  }
}
